Turbo Assembler	 Version 4.1	    03/02/20 13:54:24	    Page 1
lab2.ASM



      1				     ;*	СОЗДАНИЕ СЕГМЕНТА СТЭКА *
      2	0000			     STACKSEG SEGMENT PARA STACK "STACK"
      3	0000  20*(0000)			      DW      32   DUP(0)
      4	0040			     STACKSEG ENDS
      5				     ;*	СОЗДАНИЕ СЕГМЕНТА ДАННЫХ *
      6	0000			     DSEG SEGMENT PARA PUBLIC "DATA"
      7	0000  00			 FL    DB 0		   ; ФЛАГ НЕГАТИВНОГО(1)/ПОЗИТИВНОГО(0)   +
      8				     ЧИСЛА
      9	0001  05 ?? 04*(3F)		 DUMP  DB 5, ?,	4 DUP('?') ; СТРУКТКРА	ДАННЫХ ДЛЯ ХРАНЕНИЯ	    +
     10				     ВВОДА
     11	0007  00			 ERRCD DB 0		   ; ФЛАГ ОШИБКИ
     12								   ; 0 - ОШИБОК НЕТ
     13								   ; 1 - ОШИБКА
     14	0008  2A 45 52 52 4F 52	2A	 ERRTXT	 DB '*ERROR*'
     15	000F  20 2D 20 59 4F 55	20+		 DB ' -	YOU NEED TO ENTER THE NUMBER$'
     16	      4E 45 45 44 20 54	4F+
     17	      20 45 4E 54 45 52	20+
     18	      54 48 45 20 4E 55	4D+
     19	      42 45 52 24
     20	002F  45 4E 54 45 52 20	59+	 MSGTXT	 DB 'ENTER YOU NUMBER:$'
     21	      4F 55 20 4E 55 4D	42+
     22	      45 52 3A 24
     23	0041  41 4E 53 57 45 52	3A+	 MSG2TXT DB 'ANSWER:  $'
     24	      20 20 24
     25	004B			     DSEG ENDS
     26				     ;--------------------------------------------------------------------------
     27				     ;*	СОЗДАНИЕ СЕГМЕНТА КОДА *
     28	0000			     CSEG     SEGMENT PARA PUBLIC "CODE"
     29				     ;*	НАЧАЛО ОСНОВНОЙ ПРОЦЕДУРЫ
     30	0000			      MAIN    PROC    FAR
     31					      ASSUME  CS: CSEG,	DS: DSEG, SS: STACKSEG
     32					;* MAGIC * (РАЗМЕЩЕНИЕ ПРОГРАММЫ В ПАМЯТИ?)
     33	0000  1E			 PUSH	  DS
     34	0001  B8 0000			 MOV	  AX, 0
     35	0004  50			 PUSH	  AX
     36	0005  B8 0000s			 MOV	  AX, DSEG	 ; *ИНИЦИАЛИЗАЦИЯ СЕГМЕНТНОГО
     37	0008  8E D8			 MOV	  DS, AX	 ;  РЕГИСРА 'DS'*
     38					;* MAGIC END'S *
     39
     40	000A  E8 00BB			 CALL	  ENTER_MSG_PROC
     41	000D  E8 0021			 CALL	  INPUT_PROC	 ;ВЫЗОВ ПРОЦЕДУРЫ	"ВВОДА ДАННЫХ"
     42
     43	0010  80 3E 0007r 01		 CMP	  ERRCD,1	 ; *ЕСЛИ ЕСТЬ ОШИБКА
     44	0015  74 16			 JE	 ERR_EXIT	 ;  ПЕРЕЙТИ К ВЫВОДУ СООБЩЕНИЯ*
     45
     46					;* ПРИБАВЛЕНИУ К ВВЕДЕННОМУ ЧИСЛУ 12	(ВАРИАНТ	13)
     47	0017  BB 000C			 MOV	  BX,12		  ;ДЛЯ ВОЗМОЖНОСТИ РАБОТЫ С '12'
     48	001A  03 C3			 ADD	  AX,BX		     ;'AX' + 'BX'
     49					;* РЕЗУЛЬТАТ ПОМЕЩАЕТСЯ В 'AX'
     50
     51	001C  8B D8			 MOV	  BX,AX		  ; ЧТО БЫ	НЕ ПОТЕРЯТЬ ВВЕДЕННОЕ ЧИСЛО
     52	001E  E8 00B3			 CALL	  ENTER_MSG2_PROC
     53	0021  8B C3			 MOV	  AX,BX		  ; ЧТО БЫ	НЕ ПОТЕРЯТЬ ВВЕДЕННОЕ ЧИСЛО
     54	0023  E8 0068			 CALL	  OUTPUT_PROC	 ;ВЫЗОВ ПРОЦЕДУРЫ	"ВЫВОДА ДАННЫХ"
     55
     56	0026  80 3E 0007r 00		 CMP	  ERRCD,0	 ; *ЕСЛИ ОШИБОК НЕТ
     57	002B  74 03			 JE	 EXIT_POINT	 ;  ВЫЙТИ ИЗ ПРОГРАММЫ*
Turbo Assembler	 Version 4.1	    03/02/20 13:54:24	    Page 2
lab2.ASM



     58
     59	002D				ERR_EXIT:
     60	002D  E8 0088			 CALL ERRMSG_PROC	 ; ВЫВОД СООБЩЕНИЯ ОБ ОШИБКЕ НА	ЭКРАН
     61
     62	0030				EXIT_POINT:		 ; ДЛЯ "ВНЕШТАТНОГО" ВЫХОДА
     63
     64	0030  CB			 RET	 ;ВОЗВРАЩАЕМ УПРАВЛЕНИЕ ВЫЗЫВАЮЩЕЙ ПРОЦЕДУРЕ
     65	0031			      MAIN ENDP
     66				     ;*	КОНЕЦ ОСНОВНОЙ ПРОЦЕДУРЫ
     67				     ;--------------------------------------------------------------------------
     68				     ;*	НАЧАЛО ПРОЦЕДУРЫ	"ВВОДА ДАННЫХ"
     69	0031			      INPUT_PROC PROC
     70
     71	0031  C6 06 0007r 00		 MOV ERRCD,0	     ; ОБНУЛЕНИЕ КОДА ОШИБКИ
     72					;* ВВОД ДАННЫХ С КЛАВИТУРЫ *
     73	0036  BA 0001r			 LEA	  DX,DUMP    ; РАЗМЕЩЕНИЕ В 'DX' СТРУКТУРЫ 'DUMP'
     74	0039  B4 0A			 MOV	  AH,10	     ; КОД '10' ПРЕРЫВНИЯ 21..
     75	003B  CD 21			 INT	  21H	     ; ..ОТВЕЧАЕТ ЗА ВВОД	ДАННЫХ С	КЛАВИАТУРЫ
     76					;* ВВЕДЕННЫЕ ДАННЫЕ С КЛАВИАТУРЫ ПОМЕЩЕННЫ В 'DUMP'(DUMP+
     77				     +2)
     78					;* ОПРЕДЕЛЕНИЕ КОЛ-ВА ВВЕДЕНЫХ СИМОВЛОВ
     79	003D  BE 0002r			 LEA	  SI,DUMP+1  ; РАЗМЕЩЕНИЕ В 'SI' АДРЕСА С КОЛ-ВОМ	    +
     80				     ВВЕДЕНЫХ ЗНАКОВ
     81	0040  33 C9			 XOR	  CX,CX	     ; ОБНУЛЕНИЕ СЧЕТЧИКА
     82	0042  8A 0C			 MOV	  CL,[SI]    ; "УСТАНОВКА" СЧЕТЧИКА
     83	0044  83 F9 00			 CMP	  CX,0	     ; *ЕСЛИ НИЧЕГО НЕ ВВЕДЕНО
     84	0047  74 3F			 JE	 SOME_ERR    ; ВЫВЕСТИ КОД ОШИБКИ
     85					;* ОПРЕДЕЛЕНИЕ ПОЗИТИВНОСТИ ЧИСЛА
     86					 ; MOV	  FL,0	     ; ДЛЯ СБРОСА ФЛАГА ПОЗ/НЕГ ЧИСЛА
     87	0049  46			 INC	  SI	     ; *ПЕРЕХОД С КОЛ-ВА ВВЕДЕНЫХ СИМВОЛОВ
     88							     ;	НА ПЕРВЫЙ ВВЕДЕННЫЙ СИМВОЛ.
     89	004A  8A 04			 MOV	  AL,[SI]    ;	РАЗМЕЩЕНИЕ ЕГО В РЕГИСТР ДЛЯ		    +
     90				     ОБРАБОТКИ.
     91	004C  3C 2D			 CMP	  AL,'-'     ;	ПРОВЕРКА МИНУС ЛИ ЭТО.
     92	004E  75 0D			 JNE	 NO_MINUS    ;	ЕСЛИ МИНУСА НЕТ - ПЕРЕХОД*
     93	0050  C6 06 0000r 01		 MOV	  FL,1	     ; УСТАНОКА	ФЛАГА НЕГАТИВНОГО ЧИСЛА
     94	0055  FE C9			 DEC	  CL	     ; УЧЕСТЬ МИНУС В КОЛ-ВЕ ВВЕДЕННЫХ	    +
     95				     СИМВОЛОВ
     96	0057  83 F9 00			 CMP	  CX,0	     ; *ЕСЛИ КРОМЕ МИНУСА НИЧЕГО НЕ ВВЕДЕНО
     97	005A  74 2C			 JE	 SOME_ERR    ;	ВЫЙТИ ИЗ	ПРОГРАММЫ*
     98	005C  46			 INC	  SI	     ; ПЕРЕЙТИ К СЛЕДУЮЩЕМУ РАЗРЯДУ ЧИСЛА
     99	005D				NO_MINUS:	     ;*	НАЧАЛО РАБОТЫ С ЧИСЛОМ
    100	005D  33 C0			 XOR	  AX,AX	     ; ОЧИСТКА 'AX'
    101	005F  33 FF			 XOR	  DI,DI	     ; ОЧИСТКА 'DI'
    102	0061  BF 000A			 MOV	  DI,10	     ; ДЛЯ РАЗДЕЛЕНИЯ ЧИСЛА НА РАЗРЯДЫ
    103	0064  4E			 DEC	  SI	     ; ВОЗВРАЩАЕМСЯ	К РАБОЧЕМУ СИМВОЛУ
    104	0065				FOR_LOOP:	     ; НАЧАЛО ЦИКЛА ПРОХОДА ПО ЧИСЛУ		    +
    105				     (ПОРАЗРЯДНО)
    106	0065  46			 INC	  SI	     ; ПЕРЕХОД К ПЕРВОМУ	СИМВОЛУ
    107	0066  33 DB			 XOR	  BX,BX	     ; ОБНУЛЕНИЕ 'BX'
    108	0068  8A 1C			 MOV	  BL,[SI]    ; РАЗМЕЩЕНИЕ ЧИСЛА В РЕГИСТР
    109	006A  80 EB 30			 SUB	  BL,'0'     ; ПРЕОБРАЗОВАНИЕ ASCII TO DEC
    110	006D  80 FB 09			 CMP	  BL,9	     ; *ЕСЛИ ВВЕДЕНА	НЕ ЦИФРА
    111	0070  77 16			 JA	 SOME_ERR    ;	ВЫЙТИ ИЗ	ПРОГРАММЫ*
    112	0072  F7 E7			 MUL	  DI	     ; *УМНОЖАЕМ 'AX' НА 10 ДЛЯ ДОБАВЛЕНИЯ МЕСТА
    113							     ;	ПОД НОВЫЙ СИМВОЛ*	(1 -> 10 + 'BX'	= 11)
    114	0074  03 C3			 ADD	  AX,BX	     ;	ПРИБАВЛЯЕМ К	ЧИСЛУ В 'AX' ПОЛУЧЕННУЮ	    +
Turbo Assembler	 Version 4.1	    03/02/20 13:54:24	    Page 3
lab2.ASM



    115				     ЦИФРУ
    116	0076  E2 ED			LOOP	 FOR_LOOP    ; "КОНЕЦ" ЦИКЛА ПРОХОДА ПО ЧИСЛУ
    117	0078  80 3E 0000r 01		 CMP	  FL,1	     ; *ЕСЛИ ЧИСЛО НЕ ОТРИЦАТЕЛЬНОЕ
    118	007D  75 02			 JNE	 NOT_NEG     ;	НИЧЕГО НЕ ДЕЛАЕМ.
    119	007F  F7 D8			 NEG	  AX	     ;	ИНЧЕ - ДЕЛАЕМ	ЕГО НЕГАТИВНЫМ.
    120	0081				NOT_NEG:
    121	0081  80 3E 0007r 00		 CMP	  ERRCD,0      ; *ЕСЛИ ОШИБОК	НЕТ
    122	0086  74 05			 JE	  EXIT	     ;	НА ВЫХОД	ИЗ ПРОЦЕДУРЫ*
    123
    124	0088				SOME_ERR:
    125	0088  C6 06 0007r 01		 MOV	  ERRCD,1	 ; ПОДНЯТЬ ФЛАГ ОШИБКИ	- 1
    126
    127	008D				EXIT:
    128	008D  C3			 RET	 ;ВОЗВРАЩАЕМ УПРАВЛЕНИЕ ВЫЗЫВАЮЩЕЙ ПРОЦЕДУРЕ
    129	008E			      INPUT_PROC ENDP
    130				      ;* КОНЕЦ ПРОЦЕДУРЫ "ВВОДА ДАННЫХ"
    131				     ;--------------------------------------------------------------------------
    132				      ;* НАЧАЛО ПРОЦЕДУРЫ "ВЫВОДА ДАННЫХ"
    133	008E			       OUTPUT_PROC PROC
    134
    135	008E  8B D8			 MOV	  BX,AX	     ; РАЗМЕЩЕНИЕ ЧИСЛА В РЕГИСТРЕ AX
    136	0090  0B DB			 OR	  BX,BX	     ; *ЕСЛИ ЧИЛО ПОЛОЖИТЕЛЬНОЕ
    137	0092  B0 0A			 MOV	  AL,0AH     ; *ПЕРЕЙТИ НА СЛЕДУЩУЮ СТРОКУ
    138	0094  CD 29			 INT	  29H	     ;	В КОНСОЛИ*
    139	0096  79 06			 JNS	 M1	     ;	ПЕРЕЙТИ В M1.
    140	0098  B0 2D			 MOV	  AL,"-"     ;	ИНЧЕ РАЗМЕСТИТ В РЕЗУЛЬТАТЕ СИМВОЛ    +
    141				     МИНУСА.
    142	009A  CD 29			 INT	  29H	     ;	ВЫВЕСТИ МИНУС НА ЭКРАН*
    143	009C  F7 DB			 NEG	  BX	     ; ИЗМЕНИТЬ	СТАРШИЙ БИТ ЧИСЛА("УБРАТЬ	    +
    144				     МИНУС")
    145	009E				M1:		     ; ТОЧКА ПРЕХОДА ЕСЛИ ЧИСЛО ПОЗИТИВНОЕ
    146	009E  8B C3			 MOV	  AX,BX	     ; ОБНОВИТЬ	ЧИСЛО В РЕГИСТРЕ 'AX'(ИЗ-ЗА "NEG  +
    147				     BX")
    148	00A0  33 C9			 XOR	  CX,CX	     ; ОБНУЛИТЬ	РЕГИСТР СЧЕТЧИКА
    149	00A2  BB 000A			 MOV	  BX,10	     ; ДЛЯ РАЗДЕЛЕНИЯ ЧИСЛА НА РАЗРЯДЫ
    150	00A5				M2:		     ; НАЧАЛО ЦИКЛА "РАЗМЕЩЕНИЕ ЧИСЛА	В	    +
    151				     СТЕКЕ"
    152	00A5  33 D2			 XOR	  DX,DX	     ; ОБНУЛЕНИЕ 'DX'
    153	00A7  F7 F3			 DIV	  BX	     ; ДЕЛЕНИЕ 'AX' НА	'BX'(ОТДЕЛЕНИЕ	РАЗРЯДА)
    154	00A9  80 C2 30			 ADD	  DL,"0"     ; DECIMAL TO ASCII
    155	00AC  52			 PUSH	  DX	     ; РАЗМЕЩЕНИЕ РЕЗУЛЬТАТА В СТЕКЕ
    156	00AD  41			 INC	  CX	     ; УВЕЛИЧЕНИЕ СЧЕТЧИКА
    157	00AE  85 C0			 TEST	  AX,AX	     ; *ЕСЛИ ЕЩЕ	ОСТАЛИСЬ ЦИФРЫ В ЧИСЛЕ
    158	00B0  75 F3			 JNZ	  M2	     ;	ПОВТОРИТЬ "РАЗМЕЩЕНИЕ В СТЕКЕ"
    159	00B2				M3:		     ; НАЧАЛО ЦИКЛА ВЫВОДА ЧИСЛА ИЗ СТЕК НА   +
    160				     ЭКРАН
    161	00B2  58			 POP	  AX	     ; ДОСТАТЬ ВЕРХНЮЮ ЦИФРУ	ИЗ СТЭКА
    162	00B3  CD 29			 INT	  29H	     ; ВЫВЕСТИ ЕЁ НА	ЭКРАН
    163	00B5  E2 FB			LOOP	 M3	     ; ПОВТОРИТЬ 'M3' ПОКА	СЧЕТЧИК НЕ '0'
    164
    165	00B7  C3			 RET	 ;ВОЗВРАЩАЕМ УПРАВЛЕНИЕ ВЫЗЫВАЮЩЕЙ ПРОЦЕДУРЕ
    166	00B8			       OUTPUT_PROC ENDP
    167				      ;* КОНЕЦ ПРОЦЕДУРЫ "ВЫВОДА ДАННЫХ"
    168				     ;--------------------------------------------------------------------------
    169				      ;* НАЧАЛО ПРОЦЕДУРЫ "ВЫВОДА СООБЩЕНИЯ ОБ ОШИБКЕ"
    170	00B8			       ERRMSG_PROC PROC
    171	00B8  B0 0A			  MOV	  AL,0AH	     ; ПЕРЕЙТИ НА СЛЕДУЩУЮ СТРОКУ
Turbo Assembler	 Version 4.1	    03/02/20 13:54:24	    Page 4
lab2.ASM



    172	00BA  CD 29			  INT	  29H
    173	00BC  B4 09			  MOV	  AH,9
    174	00BE  BA 0008r			  MOV	  DX,OFFSET ERRTXT   ; ВЫВЕСТИ СООБЩЕНИЕ
    175	00C1  CD 21			  INT	  21H
    176	00C3  B8 4C00			  MOV	  AX,4C00h	     ; ЗАВЕРШИТЬ ПРОГРАММУ
    177	00C6  CD 21			  INT	  21h
    178	00C8			       ERRMSG_PROC ENDP
    179				      ;* КОНЕЦ ПРОЦЕДУРЫ "ВЫВОДА СООБЩЕНИЯ	ОБ ОШИБКЕ"
    180				     ;--------------------------------------------------------------------------
    181				     ;*	НАЧАЛО ПРОЦЕДУРЫ	"ВЫВОДА СООБЩЕНИЯ"
    182	00C8			       ENTER_MSG_PROC PROC
    183	00C8  B4 09			  MOV	  AH,9
    184	00CA  BA 002Fr			  MOV	  DX,OFFSET MSGTXT   ; ВЫВЕСТИ СООБЩЕНИЕ
    185	00CD  CD 21			  INT	  21H
    186	00CF  B0 0A			  MOV	  AL,0AH	     ; ПЕРЕЙТИ НА СЛЕДУЩУЮ СТРОКУ
    187	00D1  CD 29			  INT	  29H
    188	00D3  C3			  RET	     ;ВОЗВРАЩАЕМ УПРАВЛЕНИЕ	ВЫЗЫВАЮЩЕЙ		    +
    189				     ПРОЦЕДУРЕ
    190	00D4			       ENTER_MSG_PROC ENDP
    191				      ;* КОНЕЦ ПРОЦЕДУРЫ "ВЫВОДА СООБЩЕНИЯ"
    192				     ;--------------------------------------------------------------------------
    193				      ;* НАЧАЛО ПРОЦЕДУРЫ "ВЫВОДА СООБЩЕНИЯ2"
    194	00D4			       ENTER_MSG2_PROC PROC
    195	00D4  B0 0A			  MOV	  AL,0AH	     ; ПЕРЕЙТИ НА СЛЕДУЩУЮ СТРОКУ
    196	00D6  CD 29			  INT	  29H
    197	00D8  B4 09			  MOV	  AH,9
    198	00DA  BA 0041r			  MOV	  DX,OFFSET MSG2TXT  ; ВЫВЕСТИ СООБЩЕНИЕ
    199	00DD  CD 21			  INT	  21H
    200	00DF  C3			  RET	     ;ВОЗВРАЩАЕМ УПРАВЛЕНИЕ	ВЫЗЫВАЮЩЕЙ		    +
    201				     ПРОЦЕДУРЕ
    202	00E0			       ENTER_MSG2_PROC ENDP
    203				      ;* КОНЕЦ ПРОЦЕДУРЫ "ВЫВОДА СООБЩЕНИЯ2"
    204
    205	00E0			     CSEG ENDS	 ; КОНЕЦ СЕГМЕНТА КОДА
    206				     END MAIN	 ; ВЫХОД ИЗ ПРОГРАММЫ
Turbo Assembler	 Version 4.1	    03/02/20 13:54:24	    Page 5
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/02/20"
??FILENAME			  Text	 "lab2	  "
??TIME				  Text	 "13:54:24"
??VERSION			  Number 040A
@CPU				  Text	 0101H
@CURSEG				  Text	 CSEG
@FILENAME			  Text	 LAB2
@WORDSIZE			  Text	 2
DUMP				  Byte	 DSEG:0001
ENTER_MSG2_PROC			  Near	 CSEG:00D4
ENTER_MSG_PROC			  Near	 CSEG:00C8
ERRCD				  Byte	 DSEG:0007
ERRMSG_PROC			  Near	 CSEG:00B8
ERRTXT				  Byte	 DSEG:0008
ERR_EXIT			  Near	 CSEG:002D
EXIT				  Near	 CSEG:008D
EXIT_POINT			  Near	 CSEG:0030
FL				  Byte	 DSEG:0000
FOR_LOOP			  Near	 CSEG:0065
INPUT_PROC			  Near	 CSEG:0031
M1				  Near	 CSEG:009E
M2				  Near	 CSEG:00A5
M3				  Near	 CSEG:00B2
MAIN				  Far	 CSEG:0000
MSG2TXT				  Byte	 DSEG:0041
MSGTXT				  Byte	 DSEG:002F
NOT_NEG				  Near	 CSEG:0081
NO_MINUS			  Near	 CSEG:005D
OUTPUT_PROC			  Near	 CSEG:008E
SOME_ERR			  Near	 CSEG:0088

Groups & Segments		  Bit Size Align  Combine Class

CSEG				  16  00E0 Para	  Public  CODE
DSEG				  16  004B Para	  Public  DATA
STACKSEG			  16  0040 Para	  Stack	  STACK
